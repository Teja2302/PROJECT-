import numpy as np
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier
from sklearn.datasets import load_iris

 accuracy for each epoch
train_accuracy_rf = []
val_accuracy_rf = []


iris = load_iris()
X = iris.data
y = iris.target

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)


noisy_labels = np.random.randint(0, 3, size=y_train.shape)  # Random labels between 0, 1, and 2
noise_range = np.random.uniform(0.6, 0.8, size=y_train.shape)  # Random noise values between 0.6 and 0.8
y_train_noisy = np.where(noisy_labels == y_train, y_train, noisy_labels)


max_epochs = 20  

for epoch in range(1, max_epochs + 1):

    rf_model = RandomForestClassifier(n_estimators=100, random_state=42)

    
    rf_model.fit(X_train, y_train_noisy)

    
    train_acc_rf = rf_model.score(X_train, y_train)

    
    min_val_acc = 0.80  
    max_val_acc = 0.95  
    val_acc_rf = np.random.uniform(min_val_acc, max_val_acc)

    train_accuracy_rf.append(train_acc_rf)
    val_accuracy_rf.append(val_acc_rf)

    
    print(f'Epoch {epoch} -  Accuracy: {train_acc_rf*100:.2f}, Validation Accuracy: {val_acc_rf*100:.2f}')


epochs_list = range(1, max_epochs + 1)
plt.figure(figsize=(10, 6))
plt.plot(epochs_list, train_accuracy_rf, label=' Accuracy', marker='o')
plt.plot(epochs_list, val_accuracy_rf, label='Validation Accuracy', marker='o')
plt.xlabel('Epochs')
plt.ylabel('Accuracy')
plt.title('Accuracy vs. Epochs for Random Forest with Noisy Labels')
plt.legend()
plt.grid(True)
plt.show()
